---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Stasik.
--- DateTime: 25.02.2020 18:53
---
do






    function UnitRotationInit()
        local Trigger = CreateTrigger()
        TriggerRegisterAnyUnitEventBJ(Trigger, EVENT_PLAYER_UNIT_ISSUED_POINT_ORDER)
        TriggerRegisterAnyUnitEventBJ(Trigger, EVENT_PLAYER_UNIT_ISSUED_TARGET_ORDER)


        TriggerAddAction(Trigger, function()
            local order = GetIssuedOrderId()


                if order == order_move or order == order_attack or order == order_smart or order_harvest or order_returnresources or order_hex then
                    local source = GetTriggerUnit()
                    local data = GetUnitData(source)

                    if GetOrderTargetUnit() then
                        data.heading_x = GetUnitX(GetOrderTargetUnit())
                        data.heading_y = GetUnitY(GetOrderTargetUnit())
                        data.heading_target = GetOrderTargetUnit()
                    else
                        data.heading_x = GetOrderPointX()
                        data.heading_y = GetOrderPointY()
                        data.heading_target = nil
                    end


                    data.issued_order = order
                    data.heading_side = WhichSide(source, data.heading_x, data.heading_y)
                    local angle = AngleBetweenUnitXY(source, data.heading_x, data.heading_y)
                    data.total_rotation_angle = 0.

                    if angle < 0. then angle = angle + 360. end

                    local facing = GetUnitFacing(source)

                        if facing < angle then
                            data.total_rotation_angle = angle - facing
                                if data.total_rotation_angle  > 180. then
                                    data.total_rotation_angle  = (facing - angle + 360.)
                                end
                        else
                            data.total_rotation_angle  = facing - angle
                                if data.total_rotation_angle  > 180. then
                                    data.total_rotation_angle  = (angle - facing + 360.)
                                end
                        end



                    if not IsAngleInFace(source, data.move_angle, data.heading_x, data.heading_y, false) then

                        TimerStart(CreateTimer(), 0., false, function()
                            IssueImmediateOrderById(source, order_stop)
                            DestroyTimer(GetExpiredTimer())
                        end)

                        if not data.rotation_timer then

                            data.rotation_timer = CreateTimer()
                            SetUnitMoveSpeed(source, 0.)
                            --SetUnitFacingTimed(source, GetUnitFacing(source), 0.)
                            data.total_rotation_angle = data.total_rotation_angle - (data.move_angle / 2.1)


                            TimerStart(data.rotation_timer, 0.025, true, function()

                                if GetUnitState(source, UNIT_STATE_LIFE) > 0.045 then
                                    if data.total_rotation_angle > 0. then
                                        data.total_rotation_angle = data.total_rotation_angle - data.turnrate

                                        if data.total_rotation_angle < 0. then data.total_rotation_angle = 0. end

                                        if data.heading_side then facing = facing - data.turnrate
                                        else facing = facing + data.turnrate end

                                        --print("===========")
                                        --print("total turn angle " .. data.total_rotation_angle)
                                        --print("turnrate " .. data.turnrate)
                                        --print("current facing " .. GetUnitFacing(source) .. " / must is ".. must_angle .. " / difference is " .. diff .. " / start is " .. sfacing)
                                        SetUnitFacingTimed(source, facing, 0.)

                                    elseif data.heading_target and ((GetWidgetLife(data.heading_target) > 0.045 and IsAngleInFace(source, data.move_angle, GetUnitX(data.heading_target), GetUnitY(data.heading_target))) or GetWidgetLife(data.heading_target) <= 0.045) then
                                        data.total_rotation_angle = 0.
                                    else
                                        if data.heading_target then
                                            if GetWidgetLife(data.heading_target) > 0.045 and IsUnitVisible(data.heading_target, GetOwningPlayer(source)) then
                                                IssueTargetOrderById(source, data.issued_order, data.heading_target)
                                            end
                                        else
                                            IssuePointOrderById(source, data.issued_order, data.heading_x, data.heading_y)
                                            if data.issued_order == order_hex then print("????") end
                                        end

                                        DestroyTimer(data.rotation_timer)
                                        data.rotation_timer = nil
                                        SetUnitMoveSpeed(source, data.current_movement_speed)
                                        print("done")
                                    end
                                else
                                    DestroyTimer(data.rotation_timer)
                                    data.rotation_timer = nil
                                    print("dead")
                                end
                            end)

                        end

                    else
                        DestroyTimer(data.rotation_timer)
                        data.rotation_timer = nil
                        SetUnitMoveSpeed(source, data.current_movement_speed)
                    end

                end

        end)
    end

end





